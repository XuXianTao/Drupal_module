<?php

/*
 * hook_help()
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityListBuilder;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Url;
use Drupal\taxonomy\VocabularyInterface;

/*
 * FD_TAX         Vocabulary id
 * FD_FORM_ID     渲染对象id
 * MODULE_OFFSET  模块字段的位置
 */
define('FD_TAX', 'fd_category');
define('FD_FORM_ID', 'fd_taxonomy-terms-list');
define('MODULE_OFFSET', 1);

function fd_taxonomy_help($path, $arg)
{
    switch ($path) {
        case 'admin/help#fd_taxonomy':
            return 'this is a text for fd_taxonomy';
    }
}

/*
 * 为taxonomy添加两个字段group_id\module
 * hook_entity_base_field_info
 */
function fd_taxonomy_entity_base_field_info($entity_type)
{
    if ($entity_type->id() == 'taxonomy_term') {
        $fields = [];
        $fields['group_id'] = BaseFieldDefinition::create('integer')
            ->setLabel(t('平台编号'))
            ->setDescription(t('Group ID:所属平台编号'))
            ->setDisplayOptions('form', [
                'type' => 'string_textfield',
                'weight' => 4,
            ])
            ->setDisplayConfigurable('form', TRUE)
            ->setDisplayConfigurable('view', TRUE);
        $fields['module'] = BaseFieldDefinition::create('string')
            ->setLabel(t('内容分类'))
            ->setDescription(t('module:所属的类型-article/media/question'))
            ->setSettings([
                'max_length' => 50,
                'text_processing' => 0,
            ])
            ->setDisplayOptions('form', [
                'type' => 'string_textfield',
                'weight' => 4,
            ])
            ->setDisplayConfigurable('form', TRUE)
            ->setDisplayConfigurable('view', TRUE);
        return $fields;
    }
}

/*
 * 将指定数组的键值对一起插入数组特定位置
 * $origin     array    要被插入的原始数组
 * $offset     integer  插入位置下标
 * $kv         array    要插入的键值对
 */
function array_insert_with_kv(&$origin, $offset, $kv)
{
    $origin_last = array_splice($origin, $offset);
    $origin_last = array_merge($kv, $origin_last);
    $origin = array_merge($origin, $origin_last);
}

/*
 * hook_form_alter
 */
function fd_taxonomy_form_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, &$form_id)
{
    /*
     * 修改针对分类fd_category的表单显示
     */
    if ($form_id == 'taxonomy_overview_terms' && $form_state->getStorage()['taxonomy']['vocabulary']->id() == FD_TAX) {
        //dpm('before'.$form_state->get(['test'])['1213']);
        /*
         * 获取要显示的数据
         * $taxonomy_term          array               全部分类        =>为了获取group_id和module，
         * $group_ids              array               平台编号选项
         */
        $taxonomy_term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree(FD_TAX, 0, NULL, TRUE);
        $group_ids = [];

        /*
         * 确定渲染部分的id,用#prefix和#suffix能完全包起内容，不会漏了结束标签导致渲染出问题)
         */
        $form['#prefix'] = '<div id="' . FD_FORM_ID . '">';
        $form['#suffix'] = '</div>';
        /*
         * 整理出$group_ids
         */
        foreach ($taxonomy_term as $term) {
            $term_gid = $term->getTypedData()->getProperties()['group_id']->getString();
            array_push($group_ids, $term_gid);
        }
        $group_ids_unique = array_unique($group_ids);
        sort($group_ids_unique);
        $group_ids_unique = array_combine($group_ids_unique, $group_ids_unique);

        /*
         * 添加工具条过滤和备份字段
         */
        $tmp_array = [
            'filter' => [
                '#type' => 'select',
                '#title' => 'group_id',
                '#options' => $group_ids_unique,
                '#default_value' => array_values($group_ids_unique)[0],
                '#ajax' => [
                    'callback' => 'Drupal\fd_taxonomy\Controller\FdController::filterCallback',
                    'wrapper' => FD_FORM_ID
                ]
            ],
            'backups' => [
                '#type' => 'table',
                '#value' => [],
            ]
        ];
        $form = array_merge($tmp_array, $form);


        /*
         * 添加表头module到第二个位置
         */
        $tmp_header = [
            'module' => t('Module')
        ];
        array_insert_with_kv($form['terms']['#header'], MODULE_OFFSET, $tmp_header);

        /*
         * 获取ajax触发时候的表单状态
         */
        $p_gid = $form_state->getValue('filter', array_values($group_ids_unique)[0]);

        dpm('--------group_id: ' . $p_gid . '----------');

        /*
         * 初次设置时为每个分组设置 module 和 group_id(hidden)然后
         * 删除要显示全部分类
         */
        $count4test = 0;
        $count4test2 =0;
        foreach ($form['terms'] as $k => $form_item) {
            if (preg_match("/^tid:(\d+):(\d+)$/", $k)) {
                $count4test++;
                $count4test2++;
                $tmp = [];
                $form_item_tid = $form_item['term']['tid']['#value'];
                foreach ($taxonomy_term as $term) {
                    $term_tid = $term->id();
                    if ($term_tid == $form_item_tid) {
                        $term_module = $term->getTypedData()->getProperties()['module']->getString();
                        $term_gid = $term->getTypedData()->getProperties()['group_id']->getString();
                        $tmp = [
                            'module' => [
                                '#type' => 'item',
                                '#title' => $term_module,
                                'group_id' => [
                                    '#type' => 'hidden',
                                    '#value' => $term_gid
                                ]
                            ],
                        ];
                        break;
                    }
                }
                array_insert_with_kv($form_item, MODULE_OFFSET, $tmp);
                //删除其他平台节点
                if ($form_item['module']['group_id']['#value'] != $p_gid) {
                    $count4test--;
                    unset($form['terms'][$k]);
                }
            }
        }
        dpm('$form[\'terms\'] number: '. $count4test2);
        dpm('shown_terms: '. $count4test);

        //$form_state->setSubmitHandlers();
        //$form['#']
        $form_state->setSubmitHandlers(['mySubmitFunction']);
        //dump($form);
        //dpm($form_state->getUserInput(),'userinput');
        //dpm(($form_backups));
        //dpm(count($form_backups));
        //$form_state->set(['test'], ['1213'=> '2133213']);
        //dpm('after'.$form_state->get(['test'])['1213']);
        dpm('-----------------');
    }
    return $form;
}

function mySubmitFunction(&$form, \Drupal\Core\Form\FormState &$form_state)
{
    $form_state->setUserInput([]);
}